const axios = require("axios");
const { getTracksByGenre, getTracksByArtist } = require("../service/lastFMService");
const { populatePlaylist } = require("../service/playlistBuilderService");
const { getTrackURI, addTracksToPlaylist } = require("../service/spotifyService");
const { logger } = require("../util/logger.js");
const playlistBuilderController = require("../controller/playlistBuilderController.js");
const playlistBuilderService = require('../service/playlistBuilderService.js');


jest.mock("axios");

jest.mock("../service/lastFMService.js", () => ({
    getTracksByGenre: jest.fn(() =>
        Array.from({ length: 50 }, (_, i) => ({
            name: `Genre Song ${i + 1}`,
            artist: { name: `Genre Artist ${i + 1}` },
        }))
    ),
    getTracksByArtist: jest.fn(() =>
        Array.from({ length: 50 }, (_, i) => ({
            name: `Artist Song ${i + 1}`,
            artist: { name: `Artist Artist ${i + 1}` },
        }))
    ),
}));

jest.mock("../service/spotifyService.js", () => ({
    getTrackURI: jest.fn(() => "SpotifyURI"),
    addTracksToPlaylist: jest.fn(() => "playlistId")
}));

jest.mock("../util/logger.js");

jest.mock("../repository/playlistRepository");
const playlistRepository = require("../repository/playlistRepository.js");

jest.mock("../service/userService.js");
const userService = require("../service/userService.js");

jest.mock("../session/session.js", () => ({
    accessToken: "mockedValue",
}));

const session = require("../session/session.js");

const VALID_USER = {
    following:['user5dbd0e3b-6718-46ca-9867-f2df7765fea5'],
    SK: 'METADATA',
    password: '$2b$10$RZWpneGNmJjUsDjNWastAumap/NrDmqDvRzb3obROPTLMtZ4rjR4e',
    username: 'revature101',
    PK: 'USER#user54fcb9e1-5d8e-4d43-bd99-69cf01e8a9ef',
    email: 'example@revature.net'
}

const VALID_PLAYLIST = {
    SK: "PLAYLIST#Playlist46C7xFmDg0YcpcJHOQpdjr",
    playlistName: "Gym going playlist",
    PK: "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5",
    description: "Generated by HeartSync API",
    timestamp: 1760035483283,
    tracksInfo: [
        {
            "Title": "BALD! REMIX",
            "Artist": "JPEGMAFIA",
            "Album": "EP!",
            "Duration_ms": 153127
        } 
    ]
}

describe("Playlist Builder service layer", () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });

    describe("populatePlaylist function", () => {
        test("Successfully returns a list of 100 Spotify URIs", async () => {
            // Arrange
            // Act
            const spotifyURIs = await populatePlaylist("playlistId", "genre", "artistName");

            // Assert
            expect(spotifyURIs).toHaveLength(100);

            expect(getTracksByGenre).toHaveBeenCalledTimes(1);
            expect(getTracksByArtist).toHaveBeenCalledTimes(1);
            expect(getTrackURI).toHaveBeenCalledTimes(100);
            expect(addTracksToPlaylist).toHaveBeenCalledTimes(1);
            expect(addTracksToPlaylist).toHaveBeenCalledWith(
                "playlistId",
                expect.arrayContaining(Array(100).fill("SpotifyURI"))
            );
        });

        test("Successfully returns a list of 50 Spotify URIs based on genre", async () => {
            // Arrange
            // Act
            const spotifyURIs = await populatePlaylist("playlistId", "genre");

            // Assert
            expect(spotifyURIs).toHaveLength(50);

            expect(getTracksByGenre).toHaveBeenCalledTimes(1);
            expect(getTracksByArtist).toHaveBeenCalledTimes(0);
            expect(getTrackURI).toHaveBeenCalledTimes(50);
            expect(addTracksToPlaylist).toHaveBeenCalledTimes(1);
            expect(addTracksToPlaylist).toHaveBeenCalledWith(
                "playlistId",
                expect.arrayContaining(Array(50).fill("SpotifyURI"))
            );
        });

        test("Successfully returns a list of 50 Spotify URIs based on artist", async () => {
            // Arrange
            // Act
            const spotifyURIs = await populatePlaylist("playlistId", null, "artist");

            // Assert
            expect(spotifyURIs).toHaveLength(50);

            expect(getTracksByGenre).toHaveBeenCalledTimes(0);
            expect(getTracksByArtist).toHaveBeenCalledTimes(1);
            expect(getTrackURI).toHaveBeenCalledTimes(50);
            expect(addTracksToPlaylist).toHaveBeenCalledTimes(1);
            expect(addTracksToPlaylist).toHaveBeenCalledWith(
                "playlistId",
                expect.arrayContaining(Array(50).fill("SpotifyURI"))
            );
        });

        test("Successfully returns an empty list of Spotify URIs when no genre/artist is given", async () => {
            // Arrange
            // Act
            const spotifyURIs = await populatePlaylist("playlistId");

            // Assert
            expect(spotifyURIs).toHaveLength(0);

            expect(getTracksByGenre).toHaveBeenCalledTimes(0);
            expect(getTracksByArtist).toHaveBeenCalledTimes(0);
            expect(getTrackURI).toHaveBeenCalledTimes(0);
            expect(addTracksToPlaylist).toHaveBeenCalledTimes(0);
        });

        test("Returns null when playlist ID is not provided", async () => {
            // Arrange
            // Act
            const spotifyURIs = await populatePlaylist("", "genre", "artistName");

            // Assert
            expect(spotifyURIs).toBeNull();

            expect(addTracksToPlaylist).not.toHaveBeenCalled();
            expect(logger.error).toHaveBeenCalledTimes(1);
        });

        test("Returns null when authorization token is invalid", async () => {
            // Arrange
            getTrackURI.mockRejectedValueOnce({
                response: {
                    status: 401,
                    data: {
                        error: "Invalid token."
                    }
                }
            })

            // Act
            const spotifyURIs = await populatePlaylist("playlistId", "genre", "artistName");

            // Assert
            expect(spotifyURIs).toBeNull();

            expect(getTrackURI).toHaveBeenCalledTimes(1);
            expect(addTracksToPlaylist).not.toHaveBeenCalled();
            expect(logger.error).toHaveBeenCalledTimes(1);
        });
    });
});

describe("getPlaylistByPlaylist ID Suite", () => {
    beforeEach(() => {
        jest.clearAllMocks();
        const validPlaylistValue = {
            SK: "PLAYLIST#Playlist46C7xFmDg0YcpcJHOQpdjr",
            playlistName: "Gym going playlist",
            PK: "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5",
            description: "Generated by HeartSync API",
            timestamp: 1760035483283,
            tracksInfo: [
                {
                    "Title": "BALD! REMIX",
                    "Artist": "JPEGMAFIA",
                    "Album": "EP!",
                    "Duration_ms": 153127
                } 
            ]
        }
    });

    test("Successfully returns the correct playlist when given right ID", async () => {
        // Arrange
        playlistRepository.getPlaylistbyPlaylistId.mockReturnValue(VALID_PLAYLIST);

        const dummyPlaylistId = "46C7xFmDg0YcpcJHOQpdjr";
        const dummyUserId = "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5";
        // Act
        const playlist = await playlistBuilderService.getPlaylistByPlaylistId(dummyUserId, dummyPlaylistId);
        // Assert
        expect(playlist.SK).toBe("PLAYLIST#Playlist" + dummyPlaylistId);
        expect(playlist.PK).toBe(dummyUserId);

        expect(playlistRepository.getPlaylistbyPlaylistId).toHaveBeenCalled();
    });

    test("Giving null inputs will return null", async () => {
        const playlist = await playlistBuilderService.getPlaylistByPlaylistId(null, null);
        expect(playlist).toBeNull();
    })

    test("Giving a non-existant playlistId will return null", async () => {
        // Arrange
        playlistRepository.getPlaylistbyPlaylistId.mockReturnValue(null);

        const invalidPlaylistId = "46C7xFm3Dg0YcpcJHOQpdjr";
        const dummyUserId = "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5";
        // Act
        const playlist = await playlistBuilderService.getPlaylistByPlaylistId(dummyUserId, invalidPlaylistId);
        // Assert
        expect(playlist).toBeNull();
        expect(playlistRepository.getPlaylistbyPlaylistId).toHaveBeenCalled();
        expect(logger.error).toHaveBeenCalledTimes(1);
    })

})

describe("validatePopulatePlaylist Suite", () => {

    beforeEach(() => {
        jest.clearAllMocks();
    });
    
    test("Entering all valid inputs returns true", async () => {

        // jest.mock("../session/session.js", () => ({
        //     accessToken: "mockedValue",
        // }));

        playlistRepository.getPlaylistbyPlaylistId.mockReturnValue(VALID_PLAYLIST);

        userService.getUserById.mockReturnValue(VALID_USER);


        const dummyPlaylistId = "46C7xFmDg0YcpcJHOQpdjr";
        const dummyGenre = "rock";
        const dummyArtist = "Michael Jackson";
        const dummyUserId = "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5";

        const validatedData = await playlistBuilderService.validatePopulatePlaylist(dummyPlaylistId, dummyGenre, dummyArtist, dummyUserId);
        expect(playlistRepository.getPlaylistbyPlaylistId).toHaveBeenCalled();
        expect(userService.getUserById).toHaveBeenCalled();
        expect(validatedData).toBe(true);
    })

    test("Entering a null artist OR genre will still be valid", async () => {

        playlistRepository.getPlaylistbyPlaylistId.mockReturnValue(VALID_PLAYLIST);

        userService.getUserById.mockReturnValue(VALID_USER);


        const dummyPlaylistId = "46C7xFmDg0YcpcJHOQpdjr";
        const dummyGenre = "rock";
        const dummyArtist = "Michael Jackson";
        const dummyUserId = "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5";

        const validatedData = await playlistBuilderService.validatePopulatePlaylist(dummyPlaylistId, dummyGenre, null, dummyUserId);
        expect(playlistRepository.getPlaylistbyPlaylistId).toHaveBeenCalled();
        expect(userService.getUserById).toHaveBeenCalled();
        expect(validatedData).toBe(true);
    })

    test("entering invalid playlist or user Id will return null", async () => {

        const dummyPlaylistId = "46C7xFmDg0YcpcJHOQpdjr";
        const dummyGenre = "rock";
        const dummyArtist = "Michael Jackson";
        const dummyUserId = "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5";

        const value = await playlistBuilderService.validatePopulatePlaylist(null, dummyGenre, dummyArtist, null);
        expect(value).toBeNull();
        expect(logger.error).toHaveBeenCalledTimes(1);
    })

    test("if the requested playlist doesn't exist return false", async () => {
        playlistRepository.getPlaylistbyPlaylistId.mockReturnValue(null);

        userService.getUserById.mockReturnValue(VALID_USER);


        const dummyPlaylistId = "46C7xFmDg0YcpcJHOQpdjr";
        const dummyGenre = "rock";
        const dummyArtist = "Michael Jackson";
        const dummyUserId = "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5";

        const validatedData = await playlistBuilderService.validatePopulatePlaylist(dummyPlaylistId, dummyGenre, dummyArtist, dummyUserId);
        expect(validatedData).toBe(false);
    })

    test("if the requested user doesn't exist return false", async () => {
        playlistRepository.getPlaylistbyPlaylistId.mockReturnValue(VALID_PLAYLIST);

        userService.getUserById.mockReturnValue(null);

        const dummyPlaylistId = "46C7xFmDg0YcpcJHOQpdjr";
        const dummyGenre = "rock";
        const dummyArtist = "Michael Jackson";
        const dummyUserId = "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5";

        const validatedData = await playlistBuilderService.validatePopulatePlaylist(dummyPlaylistId, dummyGenre, dummyArtist, dummyUserId);
        expect(validatedData).toBe(false);
    })

    test("Trying to validate while not logged in will return null", async () => {
        session.accessToken = null;

        playlistRepository.getPlaylistbyPlaylistId.mockReturnValue(VALID_PLAYLIST);

        userService.getUserById.mockReturnValue(VALID_USER);


        const dummyPlaylistId = "46C7xFmDg0YcpcJHOQpdjr";
        const dummyGenre = "rock";
        const dummyArtist = "Michael Jackson";
        const dummyUserId = "USER#user5dbd0e3b-6718-46ca-9867-f2df7765fea5";

        const validatedData = await playlistBuilderService.validatePopulatePlaylist(dummyPlaylistId, dummyGenre, dummyArtist, dummyUserId);
        expect(validatedData).toBeNull();
    })

    // test("", async () => {
        
    // })
})